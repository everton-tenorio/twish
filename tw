#!/bin/bash
# author: Everton Tenorio

# Alias tw=/home/...
# Read and Install xurl: https://github.com/xdevplatform/xurl
# Rate Limits: https://docs.x.com/x-api/fundamentals/rate-limits
# Auth: You must have a developer account and app to use the xurl tool.

auth_tw() {
    export CLIENT_ID=$(cat $HOME/twish/.env  | jq -r '.tw_auth.CLIENT_ID')
    export CLIENT_SECRET=$(cat $HOME/twish/.env  | jq -r '.tw_auth.CLIENT_SECRET')

    clear

    echo -e "
🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛
🐦‍⬛     __         _     __    🐦‍⬛
🐦‍⬛    / /__    __(_)__ / /    🐦‍⬛
🐦‍⬛   / __/ |/|/ / (_-</ _ \   🐦‍⬛
🐦‍⬛   \__/|__,__/_/___/_//_/   🐦‍⬛
🐦‍⬛                            🐦‍⬛
🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛🐦‍⬛"

    echo -e "\nThe app wants to access your X account..."

    xurl auth app --bearer-token $(cat $HOME/twish/.env  | jq -r '.tw_auth.BEARER')
    xurl auth oauth2

    # xurl /2/users/me
    # xurl auth status
    exit 0
}


send_tweet() {
    local tweet_text="$1"
    local media_file="$2"
    local media_id=""

    if [ -z "$tweet_text" ]; then
        echo "❌ You need to provide text for the tweet!"
        exit 1
    fi

    # If the user provided a media file, upload it first
    if [ -n "$media_file" ]; then
        if [[ "$media_file" =~ ^https?://.*\.(jpg|jpeg|png|gif|webp)$ ]]; then

            FILE_NAME="image_$(date +%Y%m%d%H%M%S).jpg"

            # Download
            curl --silent -A \
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \
                Chrome/120.0.0.0 Safari/537.36" \
                -o "$FILE_NAME" "$media_file"

            media_file=$FILE_NAME
            echo "📜 '$media_file'"
        elif [[ -f "$media_file" ]]; then
            echo "📜 '$media_file'"
        else
            echo -e "Error: Invalid Argument. \nSend post examples: \n- tw \"New Post\" \n- tw \"New Post\" https://.../image.png"
            exit 1
        fi

        TW_OAUTH2_TOKEN=$(cat $HOME/.xurl | jq -r '.oauth2_tokens.<your username>.oauth2.access_token')

        echo "📤 Uploading media: $media_file..."
        upload_response=$(curl --silent --request POST \
            --url "https://api.x.com/2/media/upload" \
            --header "Authorization: Bearer $TW_OAUTH2_TOKEN" \
            --header "Content-Type: multipart/form-data" \
            --form "media=@$media_file")

        # Extract media_id from the JSON response
        media_id=$(echo "$upload_response" | jq -r '.id')

        if [ -z "$media_id" ] || [ "$media_id" == "null" ]; then
            echo "❌ Error uploading media!"
            exit 1
        fi
        echo "✅ Media uploaded successfully! ID: $media_id"
    fi

    # Construct payload for the tweet
    if [ -n "$media_id" ]; then
        payload='{"text": "'"$tweet_text"'", "media": {"media_ids":["'"$media_id"'"]}}'
    else
        payload='{"text": "'"$tweet_text"'"}'
    fi

    # Send tweet
    response=$(xurl -X POST /2/tweets -d "$payload")
    TWEET_ID=$(echo "$response" | jq -r '.data.id')

    if [ -n "$TWEET_ID" ]; then
        username=$(xurl /2/users/me | jq -r '.data.username')
        echo "🐦‍ ID: $TWEET_ID"
        echo -e "✅ Tweet posted! URL: https://x.com/$username/status/$TWEET_ID"
    else
        echo "❌ Error posting tweet!"
        exit 1
    fi
}


reply_tweet() {
    local tweet_id="$1"
    local tweet_text="${@:2}"  # Ensures the full message is captured

    if [ -z "$tweet_id" ] || [ -z "$tweet_text" ]; then
        echo "❌ Correct usage: ./tw -rep <tweet_id> \"message\""
        exit 1
    fi

    response=$(xurl -X POST /2/tweets -d '{"reply":{"in_reply_to_tweet_id": "'"$tweet_id"'"}, "text": "'"$tweet_text"'"}')
    echo "$response"
    exit 0
}


delete_tweet() {
    local tweet_id="$1"

    if [ -z "$tweet_id" ] && [ -z "$TWEET_ID" ]; then
        echo "❌ You need to provide a tweet ID to delete!"
        exit 1
    fi

    tweet_id=${tweet_id:-$TWEET_ID}  # Uses the last posted tweet if available

    response=$(xurl -X DELETE "/2/tweets/$tweet_id")

    if echo "$response" | jq -e '.data' > /dev/null; then
        echo "🗑️ Tweet with ID $tweet_id successfully deleted!"
    else
        echo "❌ Error deleting tweet!"
        exit 1
    fi
    exit 0
}


generate_twai() {
    local tweet_text="${@:1}"

    if [ -z "$tweet_text" ]; then
        echo "❌ Correct usage: ./tw -gen \"message\""
        exit 1
    fi

    source $HOME/twish/twai/venv/bin/activate
    python $HOME/twish/twai/twai.py "$tweet_text"
    deactivate
    rm -rf $HOME/twish/twai/__pycache__

    TWEET_EN=$(cat /tmp/tweet-en.txt)
    send_tweet "$TWEET_EN" "$2"
    exit 0
}


# Arguments
case "$1" in
    -auth)
        auth_tw
        ;;
    -rep)
        reply_tweet "$2" "${@:3}"
        ;;
    -del)
        delete_tweet "$2"
        ;;
    -gen)
        generate_twai "${@:2}"
        ;;
    "")
        echo "❌ Please provide tweet text or a valid command!"
        echo "Usage: ./tw \"Tweet text\"" 
        echo "       ./tw -auth"
        echo "       ./tw -rep <tweet_id> \"reply message\""
        echo "       ./tw -del <tweet_id>"
        echo "       ./tw -gen \"Tweet text\""
        exit 1
        ;;
    *)
        send_tweet "$1" "$2"
        ;;
esac
